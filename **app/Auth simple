import type { NextAuthOptions } from "next-auth"
import CredentialsProvider from "next-auth/providers/credentials"
import GoogleProvider from "next-auth/providers/google"
import { mockUsers } from "./mock-db"

// Simple in-memory auth implementation for preview
export const authOptions: NextAuthOptions = {
session: {
  strategy: "jwt",
},
pages: {
  signIn: "/login",
  signOut: "/",
  error: "/login",
},
providers: [
  GoogleProvider({
    clientId: process.env.GOOGLE_CLIENT_ID || "",
    clientSecret: process.env.GOOGLE_CLIENT_SECRET || "",
  }),
  CredentialsProvider({
    name: "credentials",
    credentials: {
      email: { label: "Email", type: "email" },
      password: { label: "Password", type: "password" },
    },
    async authorize(credentials) {
      if (!credentials?.email || !credentials?.password) {
        throw new Error("Invalid credentials")
      }

      // Find user in our mock database
      const user = mockUsers.find((user) => user.email === credentials.email)

      if (!user) {
        throw new Error("User not found")
      }

      // In a real app, we would compare hashed passwords
      // For preview, we'll just check if passwords match
      const isValidPassword = user.password === credentials.password

      if (!isValidPassword) {
        throw new Error("Invalid password")
      }

      return {
        id: user.id,
        name: user.name,
        email: user.email,
        image: user.image,
        subscriptionStatus: user.subscriptionStatus,
        searchCount: user.searchCount,
      }
    },
  }),
],
callbacks: {
  async session({ token, session }) {
    if (token) {
      session.user.id = token.id as string
      session.user.name = token.name
      session.user.email = token.email
      session.user.image = token.picture
      session.user.subscriptionStatus = token.subscriptionStatus as string
      session.user.searchCount = token.searchCount as number
    }

    return session
  },
  async jwt({ token, user }) {
    if (user) {
      token.id = user.id
      token.subscriptionStatus = user.subscriptionStatus
      token.searchCount = user.searchCount
    }

    return token
  },
},
}
